import Head from 'next/head'
import * as d3 from 'd3'
import {useEffect, useState, useRef} from "react";

export default function Home() {

  const initialData = [
    {
      name: "Car",
      value: 10,
    },
    {
      name: "Food",
      value: 3
    },
    {
      name: "Telephone",
      value: 9
    },
    {
      name: "Electricity",
      value: 7
    },
    {
      name: "Cinema",
      value: 7
    }
  ]

  const width = 500;
  const height = 150;
  const padding = 20;
  const maxValue = 20;

  const [chartdata, setChartdata] = useState(initialData)

  const svgRef = useRef()

  useEffect(() => {
      const xScale = d3.scalePoint()
        .domain(chartdata.map((d) => d.name))
        .range([padding, (width - padding)])
      // Yscales

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(chartdata, function (d) {
          return d.value
        })])
        .range([(height - padding), (padding)])

      const line = d3.line()
        .x((d) => xScale(d.name))
        .y((d) => yScale(d.value))
        .curve(d3.curveMonotoneX)

      d3.select(svgRef.current)
        .select('path')
        .attr('d', (value) => line(chartdata))
        .attr('fill', 'none')
        .attr('stroke', 'white')

      const xAxis = d3.axisBottom(xScale)
      const yAxis = d3.axisLeft(yScale)

      d3.select('#xaxis').remove()
      d3.select(svgRef.current)
        .append('g')
        .attr('transform', `translate (0,${height - padding})`)
        .attr('id', 'xaxis')
        .call(xAxis)

      d3.select('#yaxis').remove()
      d3.select(svgRef.current)
        .append('g')
        .attr('transform', `translate(${padding},0)`)
        .attr('id', 'yaxis')
        .call(yAxis)

    },
    [chartdata])

  const newData = () => chartdata.map(
    function (d) {
      d.value = Math.floor(
        Math.random() * (maxValue + 1)
      )
      return d
    }
  )


  return (
    <div className='App'>
      <Head>
        <title>Making a barchart using D3</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <header className="App-header">
        <svg id="chart" viewBox="0 0 500 150" ref={svgRef}>
          <rect width='500' height='150' fill='blue'/>
          <path d="" fill="none"
                stroke="black" strokeWidth="5"/>
        </svg>
        <button className='m-2.5 p-2 bg-cyan-400 rounded-lg' type='butto' onClick={() => setChartdata(newData())}>
          Refresh data
        </button>
      </header>
    </div>
  )
}